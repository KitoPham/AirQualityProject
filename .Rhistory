airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
map.frame <- map_data("world") %>%
mutate(ISO2 = iso.alpha(region))
View(map.frame)
airData <- left_join(airData,map.frame, airData$country = map.frame$ISO2)
dataUrl <- "https://api.openaq.org/v1/measurements?parameter=pm25&date_to=2015-12-06"
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(airData,map.frame)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = longitude, y = latitude, fill = value)) +
coord_quickmap()
View(airData)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, fill = value)) +
coord_quickmap()
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = lat, y = long, group = group, fill = value)) +
coord_quickmap()
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = coordinates.longitude, y = coordinates.latitude, group = group, fill = value)) +
coord_quickmap()
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
View(airData)
dataUrl <- "https://api.openaq.org/v1/measurements?parameter=pm25&date_to=2015-12-06"
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(country) %>%
summarize(value = mean(value))
dataUrl <- "https://api.openaq.org/v1/measurements?parameter=pm25&date_to=2015-12-06"
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(country) %>%
summarize(value = mean(value))
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(airData,map.frame)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
dataUrl <- "https://api.openaq.org/v1/measurements?parameter=pm25&date_to=2015-12-06"
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap() +
facet_wrap(country)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap() +
facet_wrap(airData, country)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap() +
facet_wrap(~airData, country)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap() +
facet_wrap(~country)
dataUrl <- "https://api.openaq.org/v1/measurements?parameter=pm25&date_to=2015-12-06"
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
shiny::runApp()
library(shiny)
my.ui <- fluidpage(
sidebarLayout(
sidebarPanel(
selectInput("parameter", "Select a gas", c("pm25", "pm10","so2", "o3","co","bc"))
),
mainPanel(
plotOutput("plot")
)
),
sliderInput("date","Date:",
min = as.Date("2012-01-01","%Y-%m-%d"),
max = as.Date("2017-03-06","%Y-%m-%d"),
timeFormat = "%Y-%m-%d")
)
library(shiny)
my.ui <- fluidpage(
sidebarLayout(
sidebarPanel(
selectInput("parameter", "Select a gas", c("pm25", "pm10","so2", "o3","co","bc"))
),
mainPanel(
plotOutput("plot")
)
),
sliderInput("date","Date:",
min = as.Date("2012-01-01","%Y-%m-%d"),
max = as.Date("2017-03-06","%Y-%m-%d"),
timeFormat = "%Y-%m-%d")
)
library(shiny)
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("parameter", "Select a gas", c("pm25", "pm10","so2", "o3","co","bc"))
),
mainPanel(
plotOutput("plot")
)
),
sliderInput("date","Date:",
min = as.Date("2012-01-01","%Y-%m-%d"),
max = as.Date("2017-03-06","%Y-%m-%d"),
timeFormat = "%Y-%m-%d")
)
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("parameter", "Select a gas", c("pm25", "pm10","so2", "o3","co","bc"))
),
mainPanel(
plotOutput("plot")
)
),
sliderInput("date","Date:",
min = as.Date("2012-01-01","%Y-%m-%d"),
max = as.Date("2017-03-06","%Y-%m-%d"),
value = asdate("2017-03-06","%Y-%m-%d"),
timeFormat = "%Y-%m-%d")
)
library(shiny)
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("parameter", "Select a gas", c("pm25", "pm10","so2", "o3","co","bc"))
),
mainPanel(
plotOutput("plot")
)
),
sliderInput("date","Date:",
min = as.Date("2012-01-01","%Y-%m-%d"),
max = as.Date("2017-03-06","%Y-%m-%d"),
value = as.Date("2017-03-06","%Y-%m-%d"),
timeFormat = "%Y-%m-%d")
)
dataUrl <- "https://api.openaq.org/v1/measurements?parameter=pm25&date_to=2015-12-06"
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
library(maps)
install.packages("rworldmap")
dataUrl <- "https://api.openaq.org/v1/measurements?parameter=pm25&date_to=2015-12-06"
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
library(maps)
library(maps)
library(knitr)
library(ggplot2)
library(dplyr)
library(tidyr)
dataUrl <- "https://api.openaq.org/v1/measurements?parameter=pm25&date_to=2015-12-06"
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
runApp()
library(dplyr)
library(ggplot)
library(shiny)
library(httr)
library(jsonlite)
my.server<-function(input,output){
#https://api.openaq.org/v1/measurements?parameter= (ui.dropdown input, ex= pm25)
urlHeader <- "https://api.openaq.org/v1/measurements"
urlParameter<-urlHeader + "?parameter="
#append url with & date_to of slider input (use latest)
dateInput <- reactive({
return (input$date)
})
output$plot<-renderPlot({
dataUrl<-urlParameter+"pm25&date_to="+dateInput()
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
plot <- ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
return(plot)
})
rootUrl <- "https://api.openaq.org/v1/"
### response <- GET(url)
### body.data <- fromJSON(content(response,"text"))
### body.data <- flatten(body.data)
my.server<-function(input,output){
#https://api.openaq.org/v1/measurements?parameter= (ui.dropdown input, ex= pm25)
urlHeader <- "https://api.openaq.org/v1/measurements"
urlParameter<-urlHeader + "?parameter="
#append url with & date_to of slider input (use latest)
dateInput <- reactive({
return (input$date)
})
output$plot<-renderPlot({
dataUrl<-urlParameter+"pm25&date_to="+dateInput()
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
plot <- ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
return(plot)
})
library(shiny)
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("parameter", "Select a gas", c("pm25", "pm10","so2", "o3","co","bc"))
),
mainPanel(
plotOutput("plot")
)
),
sliderInput("date","Date:",
min = as.Date("2012-01-01","%Y-%m-%d"),
max = as.Date("2017-03-06","%Y-%m-%d"),
value = as.Date("2017-03-06","%Y-%m-%d"),
timeFormat = "%Y-%m-%d")
)
runApp()
/
rootUrl <- "https://api.openaq.org/v1/"
### response <- GET(url)
### body.data <- fromJSON(content(response,"text"))
### body.data <- flatten(body.data)
my.server<-function(input,output){
#https://api.openaq.org/v1/measurements?parameter= (ui.dropdown input, ex= pm25)
urlHeader <- "https://api.openaq.org/v1/measurements"
urlParameter<-urlHeader + "?parameter="
#append url with & date_to of slider input (use latest)
dateInput <- reactive({
return (input$date)
})
output$plot<-renderPlot({
dataUrl<-urlParameter+"pm25&date_to="+dateInput()
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
plot <- ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
return(plot)
})
}
library(shiny)
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("parameter", "Select a gas", c("pm25", "pm10","so2", "o3","co","bc"))
),
mainPanel(
plotOutput("plot")
)
),
sliderInput("date","Date:",
min = as.Date("2012-01-01","%Y-%m-%d"),
max = as.Date("2017-03-06","%Y-%m-%d"),
value = as.Date("2017-03-06","%Y-%m-%d"),
timeFormat = "%Y-%m-%d")
)
runApp()
library(ggplot2)
runApp()
my.server<-function(input,output){
#https://api.openaq.org/v1/measurements?parameter= (ui.dropdown input, ex= pm25)
urlHeader <- "https://api.openaq.org/v1/measurements"
urlParameter<-paste(urlHeader,"?parameter=",sep="")
#append url with & date_to of slider input (use latest)
dateInput <- reactive({
return (input$date)
})
output$plot<-renderPlot({
dataUrl<-urlParameter+"pm25&date_to="+dateInput()
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
plot <- ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
return(plot)
})
#onclick change to country clicked
}
runApp()
my.server<-function(input,output){
#https://api.openaq.org/v1/measurements?parameter= (ui.dropdown input, ex= pm25)
urlHeader <- "https://api.openaq.org/v1/measurements"
urlParameter<-paste(urlHeader,"?parameter=",sep="")
#append url with & date_to of slider input (use latest)
dateInput <- reactive({
return (input$date)
})
output$plot<-renderPlot({
dataUrl<-paste(urlParameter+"pm25&date_to="+dateInput(),sep="")
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
plot <- ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
return(plot)
})
#onclick change to country clicked
}
runApp()
my.server<-function(input,output){
#https://api.openaq.org/v1/measurements?parameter= (ui.dropdown input, ex= pm25)
urlHeader <- "https://api.openaq.org/v1/measurements"
urlParameter<-paste(urlHeader,"?parameter=",sep="")
#append url with & date_to of slider input (use latest)
dateInput <- reactive({
return (input$date)
})
output$plot<-renderPlot({
dataUrl<-paste(urlParameter,"pm25&date_to=",dateInput(),sep="")
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
airData <- left_join(map.frame,airData)
plot <- ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
return(plot)
})
#onclick change to country clicked
}
runApp()
runApp()
my.server<-function(input,output){
#https://api.openaq.org/v1/measurements?parameter= (ui.dropdown input, ex= pm25)
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
urlHeader <- "https://api.openaq.org/v1/measurements"
urlParameter<-paste(urlHeader,"?parameter=",sep="")
#append url with & date_to of slider input (use latest)
dateInput <- reactive({
return (input$date)
})
output$plot<-renderPlot({
dataUrl<-paste(urlParameter,"pm25&date_to=",dateInput(),sep="")
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
mapCopy <- map.frame
airData <- left_join(mapCopy,airData)
plot <- ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
return(plot)
})
#onclick change to country clicked
}
runApp()
shiny::runApp()
dataUrl <- "https://api.openaq.org/v1/measurements?parameter=pm10&limit=10000&order_by=date&sort=desc"
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
View(airData)
airData
airData<- group_by(airData,country) %>%
summarize(value = mean(value))
data.frame <- reactive({
dataUrl<-paste(urlParameter,input$parameter,"&limit=10000&date_to=",input$date,sep="")
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
})
output$plot<-renderPlot({
airData <- group_by(data.frame(),country) %>%
summarize(value = mean(value))
mapCopy <- map.frame
airData <- left_join(mapCopy,airData)
plot <- ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
return(plot)
})
}
my.server<-function(input,output){
#https://api.openaq.org/v1/measurements?parameter= (ui.dropdown input, ex= pm25)
map.frame <- map_data("world") %>%
mutate(country = iso.alpha(region))
urlHeader <- "https://api.openaq.org/v1/measurements"
urlParameter<-paste(urlHeader,"?parameter=",sep="")
#append url with & date_to of slider input (use latest)
data.frame <- reactive({
dataUrl<-paste(urlParameter,input$parameter,"&limit=10000&date_to=",input$date,sep="")
airData <- GET(dataUrl)
airData <- content(airData,"text")
airData<- fromJSON(airData)
airData<- flatten(airData$results)
})
output$plot<-renderPlot({
airData <- group_by(data.frame(),country) %>%
summarize(value = mean(value))
mapCopy <- map.frame
airData <- left_join(mapCopy,airData)
plot <- ggplot(data = airData, na.rm = TRUE) +
geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
coord_quickmap()
return(plot)
})
#onclick change to country clicked
}
runApp()
