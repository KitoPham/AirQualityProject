scale_color_brewer(palette = 'Reds') +
coord_cartesian(xlim = ranges2$x, ylim = ranges2$y)
return(plot)
})
##Check for zoom range
observe({
brush <- input$zoom_brush
if (!is.null(brush)) {
ranges2$x <- c(brush$xmin, brush$xmax)
ranges2$y <- c(brush$ymin, brush$ymax)
} else {
ranges2$x <- NULL
ranges2$y <- NULL
}
})
#set up for brush
selecttable <- reactiveValues(
row = data.frame()
)
output$overtime <- renderPlot({
city1.frame <- filter(us.all.frame, city == input$city1);
city2.frame <- filter(us.all.frame, city == input$city2);
plot <- ggplot() +
geom_point(data = city1.frame, mapping = aes(x = utc, y = value), color = "RED")+
geom_point(data = city2.frame, mapping = aes(x = utc, y = value), color = "BLUE")
return(plot)
})
}
runApp()
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
uiOutput("selectthis"),
uiOutput("selectthat"),
sliderInput("date","Date:",
min = as.Date("2017-02-07","%Y-%m-%d"),
max = as.Date("2017-03-07","%Y-%m-%d"),
value = c(as.Date("2016-03-01","%Y-%m-%d"),
as.Date("2017-03-07","%Y-%m-%d")),
timeFormat = "%Y-%m-%d")
),
mainPanel(
tabsetPanel(type="tabs",
tabPanel(
"Compare",
plotOutput("overtime", hover = "overtimehover")#,
#plotOutput("barCompare", hover = "barHover")
),
tabPanel(
"Map",
plotOutput("plot",
brush = brushOpts(id = "zoom_brush",resetOnNew = TRUE)
),
plotOutput("zoomed")
)
)
)
)
)
runApp()
my.server<-function(input,output){
feb.7.10 <- read.csv('data/Feb7-10.csv', stringsAsFactors=FALSE)
feb.11.15 <- read.csv('data/Feb11-15.csv', stringsAsFactors=FALSE)
feb.16.20 <- read.csv('data/Feb16-20.csv', stringsAsFactors=FALSE)
feb.21.24 <- read.csv('data/Feb21-24.csv', stringsAsFactors=FALSE)
feb.25.26 <- read.csv('data/Feb25-26.csv', stringsAsFactors=FALSE)
feb.27.28 <- read.csv('data/Feb27-28.csv', stringsAsFactors=FALSE)
mar.1.4 <- read.csv('data/Mar1-4.csv', stringsAsFactors=FALSE)
mar.5.7 <- read.csv('data/Mar5-7.csv', stringsAsFactors=FALSE)
us.all.frame <- rbind(mar.5.7, mar.1.4, feb.27.28, feb.25.26,
feb.21.24, feb.16.20, feb.11.15, feb.7.10)
us.frame <- aggregate(value~location + latitude + longitude + city, us.all.frame, mean)
us.frame <- filter(us.frame, latitude > 25) %>%
filter(latitude < 55)
us.plot.frame <- us.frame
us.plot.frame$value = cut(us.frame$value, 10, labels = c('0 to 3', "3 to 6", "6 to 8", "8 to 10", "10 to 13","13 to 16", "16 to 19", "19 to 22", "22 to 27", "NA"))
output$selectthis <- renderUI({
selectInput("city1", "City 1", unique(us.frame$city))
})
output$selectthat <- renderUI({
selectInput("city2", "City 2", unique(us.frame$city))
})
#updateSelectInput(session, "selectthis", choices = unique(us.frame$location))
#updateSelectInput(session, "selectthat", choices = unique(us.frame$location))
states <- map_data("state")
ranges2 <- reactiveValues(x = NULL, y = NULL)
##Plots World Map
output$plot<-renderPlot({
us.frame <- filter(us.frame, latitude > 25) %>%
filter(latitude < 55)
plot <- ggplot() +
geom_polygon(data = states, fill = "#629632", color = "#000000", aes(x = long, y = lat, group = group))  +
geom_point(data = us.plot.frame, aes(x = longitude, y = latitude, color = value)) +
scale_color_brewer(palette = 'Reds')
return(plot)
})
#  PLACE
##Zoomed in Plot
output$zoomed <- renderPlot({
plot <- ggplot() +
geom_polygon(data = states, fill = "#629632", color = "#000000", aes(x = long, y = lat, group = group))  +
geom_point(data = us.plot.frame, aes(x = longitude, y = latitude, color = value, size = 10)) +
scale_color_brewer(palette = 'Reds') +
coord_cartesian(xlim = ranges2$x, ylim = ranges2$y)
return(plot)
})
##Check for zoom range
observe({
brush <- input$zoom_brush
if (!is.null(brush)) {
ranges2$x <- c(brush$xmin, brush$xmax)
ranges2$y <- c(brush$ymin, brush$ymax)
} else {
ranges2$x <- NULL
ranges2$y <- NULL
}
})
#set up for brush
selecttable <- reactiveValues(
row = data.frame()
)
output$overtime <- renderPlot({
city1.frame <- filter(us.all.frame, city == input$city1);
city2.frame <- filter(us.all.frame, city == input$city2);
plot <- ggplot() +
geom_point(data = city1.frame, mapping = aes(x = utc, y = value), color = "RED")+
geom_point(data = city2.frame, mapping = aes(x = utc, y = value), color = "BLUE")
return(plot)
})
output$barCompare <- renderPlot({
city1.frame <- filter(us.frame, city == input$city1) %>%
group_by(city) %>%
summarize(average = mean(value))
city2.frame <- filter(us.frame, city == input$city2)%>%
group_by(city) %>%
summarize(average = mean(value))
plot <- ggplot() +
geom_col(data = city1.frame, mapping = aes(x = city, y = average), color = "RED")+
geom_col(data = city2.frame, mapping = aes(x = city, y = average), color = "BLUE")
return(plot)
})
}
runApp()
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
uiOutput("selectthis"),
uiOutput("selectthat"),
sliderInput("date","Date:",
min = as.Date("2017-02-07","%Y-%m-%d"),
max = as.Date("2017-03-07","%Y-%m-%d"),
value = c(as.Date("2016-03-01","%Y-%m-%d"),
as.Date("2017-03-07","%Y-%m-%d")),
timeFormat = "%Y-%m-%d")
),
mainPanel(
tabsetPanel(type="tabs",
tabPanel(
"Compare",
plotOutput("overtime", hover = "overtimehover"),
plotOutput("barCompare", hover = "barHover")
),
tabPanel(
"Map",
plotOutput("plot",
brush = brushOpts(id = "zoom_brush",resetOnNew = TRUE)
),
plotOutput("zoomed")
)
)
)
)
)
runApp()
my.server<-function(input,output){
feb.7.10 <- read.csv('data/Feb7-10.csv', stringsAsFactors=FALSE)
feb.11.15 <- read.csv('data/Feb11-15.csv', stringsAsFactors=FALSE)
feb.16.20 <- read.csv('data/Feb16-20.csv', stringsAsFactors=FALSE)
feb.21.24 <- read.csv('data/Feb21-24.csv', stringsAsFactors=FALSE)
feb.25.26 <- read.csv('data/Feb25-26.csv', stringsAsFactors=FALSE)
feb.27.28 <- read.csv('data/Feb27-28.csv', stringsAsFactors=FALSE)
mar.1.4 <- read.csv('data/Mar1-4.csv', stringsAsFactors=FALSE)
mar.5.7 <- read.csv('data/Mar5-7.csv', stringsAsFactors=FALSE)
us.all.frame <- rbind(mar.5.7, mar.1.4, feb.27.28, feb.25.26,
feb.21.24, feb.16.20, feb.11.15, feb.7.10)
us.frame <- aggregate(value~location + latitude + longitude + city, us.all.frame, mean)
us.frame <- filter(us.frame, latitude > 25) %>%
filter(latitude < 55)
us.plot.frame <- us.frame
us.plot.frame$value = cut(us.frame$value, 10, labels = c('0 to 3', "3 to 6", "6 to 8", "8 to 10", "10 to 13","13 to 16", "16 to 19", "19 to 22", "22 to 27", "NA"))
output$selectthis <- renderUI({
selectInput("city1", "City 1", unique(us.frame$city))
})
output$selectthat <- renderUI({
selectInput("city2", "City 2", unique(us.frame$city))
})
#updateSelectInput(session, "selectthis", choices = unique(us.frame$location))
#updateSelectInput(session, "selectthat", choices = unique(us.frame$location))
states <- map_data("state")
ranges2 <- reactiveValues(x = NULL, y = NULL)
##Plots World Map
output$plot<-renderPlot({
us.frame <- filter(us.frame, latitude > 25) %>%
filter(latitude < 55)
plot <- ggplot() +
geom_polygon(data = states, fill = "#629632", color = "#000000", aes(x = long, y = lat, group = group))  +
geom_point(data = us.plot.frame, aes(x = longitude, y = latitude, color = value)) +
scale_color_brewer(palette = 'Reds')
return(plot)
})
#  PLACE
##Zoomed in Plot
output$zoomed <- renderPlot({
plot <- ggplot() +
geom_polygon(data = states, fill = "#629632", color = "#000000", aes(x = long, y = lat, group = group))  +
geom_point(data = us.plot.frame, aes(x = longitude, y = latitude, color = value, size = 10)) +
scale_color_brewer(palette = 'Reds') +
coord_cartesian(xlim = ranges2$x, ylim = ranges2$y)
return(plot)
})
##Check for zoom range
observe({
brush <- input$zoom_brush
if (!is.null(brush)) {
ranges2$x <- c(brush$xmin, brush$xmax)
ranges2$y <- c(brush$ymin, brush$ymax)
} else {
ranges2$x <- NULL
ranges2$y <- NULL
}
})
#set up for brush
selecttable <- reactiveValues(
row = data.frame()
)
output$overtime <- renderPlot({
city1.frame <- filter(us.all.frame, city == input$city1);
city2.frame <- filter(us.all.frame, city == input$city2);
plot <- ggplot() +
geom_point(data = city1.frame, mapping = aes(x = utc, y = value), color = "RED")+
geom_point(data = city2.frame, mapping = aes(x = utc, y = value), color = "BLUE")
return(plot)
})
output$barCompare <- renderPlot({
city1.frame <- filter(us.frame, city == input$city1) %>%
group_by(city) %>%
summarize(average = mean(value))
city2.frame <- filter(us.frame, city == input$city2)%>%
group_by(city) %>%
summarize(average = mean(value))
cityframe <- r.bind(city1.frame, city2.frame)
plot <- ggplot() +
geom_col(data = cityframe, mapping = aes(x = city, y = average))
return(plot)
})
}
runApp()
my.server<-function(input,output){
feb.7.10 <- read.csv('data/Feb7-10.csv', stringsAsFactors=FALSE)
feb.11.15 <- read.csv('data/Feb11-15.csv', stringsAsFactors=FALSE)
feb.16.20 <- read.csv('data/Feb16-20.csv', stringsAsFactors=FALSE)
feb.21.24 <- read.csv('data/Feb21-24.csv', stringsAsFactors=FALSE)
feb.25.26 <- read.csv('data/Feb25-26.csv', stringsAsFactors=FALSE)
feb.27.28 <- read.csv('data/Feb27-28.csv', stringsAsFactors=FALSE)
mar.1.4 <- read.csv('data/Mar1-4.csv', stringsAsFactors=FALSE)
mar.5.7 <- read.csv('data/Mar5-7.csv', stringsAsFactors=FALSE)
us.all.frame <- rbind(mar.5.7, mar.1.4, feb.27.28, feb.25.26,
feb.21.24, feb.16.20, feb.11.15, feb.7.10)
us.frame <- aggregate(value~location + latitude + longitude + city, us.all.frame, mean)
us.frame <- filter(us.frame, latitude > 25) %>%
filter(latitude < 55)
us.plot.frame <- us.frame
us.plot.frame$value = cut(us.frame$value, 10, labels = c('0 to 3', "3 to 6", "6 to 8", "8 to 10", "10 to 13","13 to 16", "16 to 19", "19 to 22", "22 to 27", "NA"))
output$selectthis <- renderUI({
selectInput("city1", "City 1", unique(us.frame$city))
})
output$selectthat <- renderUI({
selectInput("city2", "City 2", unique(us.frame$city))
})
#updateSelectInput(session, "selectthis", choices = unique(us.frame$location))
#updateSelectInput(session, "selectthat", choices = unique(us.frame$location))
states <- map_data("state")
ranges2 <- reactiveValues(x = NULL, y = NULL)
##Plots World Map
output$plot<-renderPlot({
us.frame <- filter(us.frame, latitude > 25) %>%
filter(latitude < 55)
plot <- ggplot() +
geom_polygon(data = states, fill = "#629632", color = "#000000", aes(x = long, y = lat, group = group))  +
geom_point(data = us.plot.frame, aes(x = longitude, y = latitude, color = value)) +
scale_color_brewer(palette = 'Reds')
return(plot)
})
#  PLACE
##Zoomed in Plot
output$zoomed <- renderPlot({
plot <- ggplot() +
geom_polygon(data = states, fill = "#629632", color = "#000000", aes(x = long, y = lat, group = group))  +
geom_point(data = us.plot.frame, aes(x = longitude, y = latitude, color = value, size = 10)) +
scale_color_brewer(palette = 'Reds') +
coord_cartesian(xlim = ranges2$x, ylim = ranges2$y)
return(plot)
})
##Check for zoom range
observe({
brush <- input$zoom_brush
if (!is.null(brush)) {
ranges2$x <- c(brush$xmin, brush$xmax)
ranges2$y <- c(brush$ymin, brush$ymax)
} else {
ranges2$x <- NULL
ranges2$y <- NULL
}
})
#set up for brush
selecttable <- reactiveValues(
row = data.frame()
)
output$overtime <- renderPlot({
city1.frame <- filter(us.all.frame, city == input$city1);
city2.frame <- filter(us.all.frame, city == input$city2);
plot <- ggplot() +
geom_point(data = city1.frame, mapping = aes(x = utc, y = value), color = "RED")+
geom_point(data = city2.frame, mapping = aes(x = utc, y = value), color = "BLUE")
return(plot)
})
output$barCompare <- renderPlot({
city1.frame <- filter(us.frame, city == input$city1) %>%
group_by(city) %>%
summarize(average = mean(value))
city2.frame <- filter(us.frame, city == input$city2)%>%
group_by(city) %>%
summarize(average = mean(value))
cityframe <- rbind(city1.frame, city2.frame)
plot <- ggplot() +
geom_col(data = cityframe, mapping = aes(x = city, y = average))
return(plot)
})
}
runApp()
runApp()
my.server<-function(input,output){
feb.7.10 <- read.csv('data/Feb7-10.csv', stringsAsFactors=FALSE)
feb.11.15 <- read.csv('data/Feb11-15.csv', stringsAsFactors=FALSE)
feb.16.20 <- read.csv('data/Feb16-20.csv', stringsAsFactors=FALSE)
feb.21.24 <- read.csv('data/Feb21-24.csv', stringsAsFactors=FALSE)
feb.25.26 <- read.csv('data/Feb25-26.csv', stringsAsFactors=FALSE)
feb.27.28 <- read.csv('data/Feb27-28.csv', stringsAsFactors=FALSE)
mar.1.4 <- read.csv('data/Mar1-4.csv', stringsAsFactors=FALSE)
mar.5.7 <- read.csv('data/Mar5-7.csv', stringsAsFactors=FALSE)
us.all.frame <- rbind(mar.5.7, mar.1.4, feb.27.28, feb.25.26,
feb.21.24, feb.16.20, feb.11.15, feb.7.10)
us.frame <- aggregate(value~location + latitude + longitude + city, us.all.frame, mean)
us.frame <- filter(us.frame, latitude > 25) %>%
filter(latitude < 55)
us.plot.frame <- us.frame
us.plot.frame$value = cut(us.frame$value, 10, labels = c('0 to 3', "3 to 6", "6 to 8", "8 to 10", "10 to 13","13 to 16", "16 to 19", "19 to 22", "22 to 27", "NA"))
output$selectthis <- renderUI({
selectInput("city1", "City 1", unique(us.frame$city))
})
output$selectthat <- renderUI({
selectInput("city2", "City 2", unique(us.frame$city))
})
#updateSelectInput(session, "selectthis", choices = unique(us.frame$location))
#updateSelectInput(session, "selectthat", choices = unique(us.frame$location))
states <- map_data("state")
ranges2 <- reactiveValues(x = NULL, y = NULL)
##Plots World Map
output$plot<-renderPlot({
us.frame <- filter(us.frame, latitude > 25) %>%
filter(latitude < 55)
plot <- ggplot() +
geom_polygon(data = states, fill = "#629632", color = "#000000", aes(x = long, y = lat, group = group))  +
geom_point(data = us.plot.frame, aes(x = longitude, y = latitude, color = value)) +
scale_color_brewer(palette = 'Reds')
return(plot)
})
#  PLACE
##Zoomed in Plot
output$zoomed <- renderPlot({
plot <- ggplot() +
geom_polygon(data = states, fill = "#629632", color = "#000000", aes(x = long, y = lat, group = group))  +
geom_point(data = us.plot.frame, aes(x = longitude, y = latitude, color = value, size = 10)) +
scale_color_brewer(palette = 'Reds') +
coord_cartesian(xlim = ranges2$x, ylim = ranges2$y)
return(plot)
})
##Check for zoom range
observe({
brush <- input$zoom_brush
if (!is.null(brush)) {
ranges2$x <- c(brush$xmin, brush$xmax)
ranges2$y <- c(brush$ymin, brush$ymax)
} else {
ranges2$x <- NULL
ranges2$y <- NULL
}
})
#set up for brush
selecttable <- reactiveValues(
row = data.frame()
)
output$overtime <- renderPlot({
city1.frame <- filter(us.all.frame, city == input$city1);
city2.frame <- filter(us.all.frame, city == input$city2);
plot <- ggplot() +
geom_point(data = city1.frame, mapping = aes(x = utc, y = value), color = "RED")+
geom_smooth(data=city1.frame,mapping=aes(x=utc,y=value),color = "RED")+
geom_point(data = city2.frame, mapping = aes(x = utc, y = value), color = "BLUE")+
geom_smooth(data=city2.frame,mapping=aes(x=utc,y=value),color = "BLUE")
return(plot)
})
output$barCompare <- renderPlot({
city1.frame <- filter(us.frame, city == input$city1) %>%
group_by(city) %>%
summarize(average = mean(value))
city2.frame <- filter(us.frame, city == input$city2)%>%
group_by(city) %>%
summarize(average = mean(value))
cityframe <- rbind(city1.frame, city2.frame)
plot <- ggplot() +
geom_col(data = cityframe, mapping = aes(x = city, y = average, color=city))
return(plot)
})
}
runApp()
my.server<-function(input,output){
feb.7.10 <- read.csv('data/Feb7-10.csv', stringsAsFactors=FALSE)
feb.11.15 <- read.csv('data/Feb11-15.csv', stringsAsFactors=FALSE)
feb.16.20 <- read.csv('data/Feb16-20.csv', stringsAsFactors=FALSE)
feb.21.24 <- read.csv('data/Feb21-24.csv', stringsAsFactors=FALSE)
feb.25.26 <- read.csv('data/Feb25-26.csv', stringsAsFactors=FALSE)
feb.27.28 <- read.csv('data/Feb27-28.csv', stringsAsFactors=FALSE)
mar.1.4 <- read.csv('data/Mar1-4.csv', stringsAsFactors=FALSE)
mar.5.7 <- read.csv('data/Mar5-7.csv', stringsAsFactors=FALSE)
us.all.frame <- rbind(mar.5.7, mar.1.4, feb.27.28, feb.25.26,
feb.21.24, feb.16.20, feb.11.15, feb.7.10)
us.frame <- aggregate(value~location + latitude + longitude + city, us.all.frame, mean)
us.frame <- filter(us.frame, latitude > 25) %>%
filter(latitude < 55)
us.plot.frame <- us.frame
us.plot.frame$value = cut(us.frame$value, 10, labels = c('0 to 3', "3 to 6", "6 to 8", "8 to 10", "10 to 13","13 to 16", "16 to 19", "19 to 22", "22 to 27", "NA"))
output$selectthis <- renderUI({
selectInput("city1", "City 1", unique(us.frame$city))
})
output$selectthat <- renderUI({
selectInput("city2", "City 2", unique(us.frame$city))
})
#updateSelectInput(session, "selectthis", choices = unique(us.frame$location))
#updateSelectInput(session, "selectthat", choices = unique(us.frame$location))
states <- map_data("state")
ranges2 <- reactiveValues(x = NULL, y = NULL)
##Plots World Map
output$plot<-renderPlot({
us.frame <- filter(us.frame, latitude > 25) %>%
filter(latitude < 55)
plot <- ggplot() +
geom_polygon(data = states, fill = "#629632", color = "#000000", aes(x = long, y = lat, group = group))  +
geom_point(data = us.plot.frame, aes(x = longitude, y = latitude, color = value)) +
scale_color_brewer(palette = 'Reds')
return(plot)
})
#  PLACE
##Zoomed in Plot
output$zoomed <- renderPlot({
plot <- ggplot() +
geom_polygon(data = states, fill = "#629632", color = "#000000", aes(x = long, y = lat, group = group))  +
geom_point(data = us.plot.frame, aes(x = longitude, y = latitude, color = value, size = 10)) +
scale_color_brewer(palette = 'Reds') +
coord_cartesian(xlim = ranges2$x, ylim = ranges2$y)
return(plot)
})
##Check for zoom range
observe({
brush <- input$zoom_brush
if (!is.null(brush)) {
ranges2$x <- c(brush$xmin, brush$xmax)
ranges2$y <- c(brush$ymin, brush$ymax)
} else {
ranges2$x <- NULL
ranges2$y <- NULL
}
})
#set up for brush
selecttable <- reactiveValues(
row = data.frame()
)
output$overtime <- renderPlot({
city1.frame <- filter(us.all.frame, city == input$city1);
city2.frame <- filter(us.all.frame, city == input$city2);
plot <- ggplot() +
geom_point(data = city1.frame, mapping = aes(x = utc, y = value), color = "RED")+
geom_smooth(color = "RED")+
geom_point(data = city2.frame, mapping = aes(x = utc, y = value), color = "BLUE")+
geom_smooth(color = "BLUE")
return(plot)
})
output$barCompare <- renderPlot({
city1.frame <- filter(us.frame, city == input$city1) %>%
group_by(city) %>%
summarize(average = mean(value))
city2.frame <- filter(us.frame, city == input$city2)%>%
group_by(city) %>%
summarize(average = mean(value))
cityframe <- rbind(city1.frame, city2.frame)
plot <- ggplot() +
geom_col(data = cityframe, mapping = aes(x = city, y = average, fill=city))
return(plot)
})
}
runApp()
runApp()
